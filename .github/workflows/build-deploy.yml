name: Build and Deploy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Smoke test - ensure the application builds successfully
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

      # Only proceed with Docker build and push for main branch pushes
      - name: Determine deployment eligibility
        id: deploy-check
        run: |
          echo "Should deploy: event=${{ github.event_name }}, ref=${{ github.ref }}"
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main") ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment eligible: Push to main/master branch"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping deployment: Not a push to main/master"
          fi

      # Docker build and push - only for eligible deployments
      - name: Log in to GitHub Container Registry
        if: steps.deploy-check.outputs.should_deploy == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.deploy-check.outputs.should_deploy == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for App
        if: steps.deploy-check.outputs.should_deploy == 'true'
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Extract metadata for WebSocket
        if: steps.deploy-check.outputs.should_deploy == 'true'
        id: meta-ws
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      # Build and push App image
      - name: Build and push App Docker image
        if: steps.deploy-check.outputs.should_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.standalone
          push: true
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Build and push WebSocket image
      - name: Build and push WebSocket Docker image
        if: steps.deploy-check.outputs.should_deploy == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: ${{ steps.meta-ws.outputs.tags }}
          labels: ${{ steps.meta-ws.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Create deployment summary
        if: steps.deploy-check.outputs.should_deploy == 'true'
        run: |
          echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- **App**: \`${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **WebSocket**: \`${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Trigger Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      # Trigger deployment webhook - only for push events to main/master
      - name: Trigger Coolify Deployment
        if: steps.deploy-check.outputs.should_deploy == 'true' && github.event_name == 'push'
        continue-on-error: true
        run: |
          # Extra safety check to ensure we're only triggering for push events
          if [[ "${{ github.event_name }}" != "push" ]]; then
            echo "❌ Webhook skipped: Not a push event (event: ${{ github.event_name }})"
            exit 0
          fi
          
          if [[ "${{ github.ref }}" != "refs/heads/master" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "❌ Webhook skipped: Not main/master branch (ref: ${{ github.ref }})"
            exit 0
          fi
          
          if [ -z "${{ secrets.COOLIFY_WEBHOOK_URL }}" ]; then
            echo "⚠️ No webhook URL configured, skipping deployment trigger"
            exit 0
          fi
          
          echo "🚀 Triggering Coolify deployment webhook..."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          response=$(curl -X POST ${{ secrets.COOLIFY_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_DEPLOY_TOKEN }}" \
            -d '{
              "app_image": "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app:latest",
              "ws_image": "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket:latest",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "event": "${{ github.event_name }}",
              "triggered_by": "github_actions"
            }' \
            --max-time 30 \
            --connect-timeout 10 \
            -w "\n%{http_code}" \
            -s || echo "timeout")
          
          if [ "$response" = "timeout" ]; then
            echo "⏱️ Webhook timed out after 30 seconds - deployment may still be processing"
            echo "Check Coolify dashboard for deployment status"
            echo "### Webhook Status: ⏱️ Timeout" >> $GITHUB_STEP_SUMMARY
            echo "Deployment may still be processing. Check Coolify dashboard." >> $GITHUB_STEP_SUMMARY
          elif [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
            echo "✅ Webhook triggered successfully (HTTP $response)"
            echo "### Webhook Status: ✅ Success (HTTP $response)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Webhook failed with HTTP $response"
            echo "### Webhook Status: ❌ Failed (HTTP $response)" >> $GITHUB_STEP_SUMMARY
          fi

      # Summary for non-deployment runs
      - name: Create build summary (non-deployment)
        if: steps.deploy-check.outputs.should_deploy == 'false'
        run: |
          echo "## Build Summary 🏗️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Reason: Not a push to main/master branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY