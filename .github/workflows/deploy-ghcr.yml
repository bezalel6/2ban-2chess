name: Build and Push to GHCR
# Rebuild trigger: 2024-09-04

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Optional: Run tests
      - name: Run tests
        run: npm run test:headless || true
        continue-on-error: true

      # Build the application (creates .next/standalone)
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for App
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Extract metadata for WebSocket
        id: meta-ws
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      # Build and push App image
      - name: Build and push App Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.standalone
          push: true
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Build and push WebSocket image
      - name: Build and push WebSocket Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: ${{ steps.meta-ws.outputs.tags }}
          labels: ${{ steps.meta-ws.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- **App**: \`${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **WebSocket**: \`${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Instructions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your docker-compose.production.ghcr.yml with these images" >> $GITHUB_STEP_SUMMARY
          echo "2. Pull and restart containers on your server" >> $GITHUB_STEP_SUMMARY
          echo "3. Or trigger Coolify webhook for automatic deployment" >> $GITHUB_STEP_SUMMARY

      # Optional: Trigger deployment webhook
      - name: Trigger Coolify Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.COOLIFY_WEBHOOK_URL }}" ]; then
            echo "Triggering Coolify deployment webhook..."
            curl -X POST ${{ secrets.COOLIFY_WEBHOOK_URL }} \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_DEPLOY_TOKEN }}" \
              -d '{
                "app_image": "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-app:latest",
                "ws_image": "${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-websocket:latest",
                "branch": "${{ github.ref_name }}",
                "commit": "${{ github.sha }}"
              }' \
              --max-time 30 \
              --connect-timeout 10 \
              -w "\n%{http_code}" \
              -s || echo "Webhook trigger failed or timed out"
          else
            echo "No webhook URL configured, skipping deployment trigger"
          fi