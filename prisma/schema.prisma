// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== NextAuth Models ====================
// These models are required for NextAuth.js with Prisma adapter

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  // Custom fields for our chess application
  username      String    @unique  // Always required - generated on creation
  isGuest       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  
  // Game relations (prepared for future)
  gamesAsWhite  Game[]    @relation("WhitePlayer")
  gamesAsBlack  Game[]    @relation("BlackPlayer")
  
  // User preferences and stats
  preferences   Json?     @default("{}")
  stats         Json?     @default("{}")
  
  @@index([email])
  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== Game Models ====================

model Game {
  id            String    @id @default(cuid())
  
  // Players
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User      @relation("WhitePlayer", fields: [whitePlayerId], references: [id])
  blackPlayer   User      @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
  
  // Core game data
  bcn           String[]  // Array of BCN strings: ["b:e2e4", "m:d2d4", "b:e7e5", ...]
  moveTimes     Int[]     // Time per action in milliseconds [2300, 5100, 1800, ...]
  finalPosition String?   // Final BanChess FEN with ban state (7th field) for thumbnail display
  
  // Basic metadata
  result        String    // "1-0", "0-1", "1/2-1/2"
  resultReason  String?   // "checkmate", "resignation", "timeout", "stalemate", etc.
  timeControl   String    // "300+3" format
  moveCount     Int?      // Total number of moves for quick statistics
  
  // When the completed game was saved
  createdAt     DateTime  @default(now())
  
  @@index([whitePlayerId])
  @@index([blackPlayerId])
}

// ==================== Player Presence (for online status) ====================

model PlayerPresence {
  id            String   @id @default(cuid())
  userId        String   @unique
  status        String   // "online", "offline", "in_game"
  lastHeartbeat DateTime @default(now())
  gameId        String?
  
  @@index([status])
  @@index([lastHeartbeat])
}