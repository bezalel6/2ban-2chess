generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  username      String    @unique
  isGuest       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  preferences   Json?     @default("{}")
  stats         Json?     @default("{}")
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  gamesAsBlack  Game[]    @relation("BlackPlayer")
  gamesAsWhite  Game[]    @relation("WhitePlayer")
  sessions      Session[]

  @@index([email])
  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id            String   @id @default(cuid())
  whitePlayerId String
  blackPlayerId String
  bcn           String[]
  moveTimes     Int[]
  finalPosition String?
  result        String
  resultReason  String?
  timeControl   String
  moveCount     Int?
  createdAt     DateTime @default(now())
  blackPlayer   User     @relation("BlackPlayer", fields: [blackPlayerId], references: [id])
  whitePlayer   User     @relation("WhitePlayer", fields: [whitePlayerId], references: [id])

  @@index([whitePlayerId])
  @@index([blackPlayerId])
}

model PlayerPresence {
  id            String   @id @default(cuid())
  userId        String   @unique
  status        String
  lastHeartbeat DateTime @default(now())
  gameId        String?

  @@index([status])
  @@index([lastHeartbeat])
}

model GlobalSettings {
  id            String   @id @default("global")
  soundVolume   Float    @default(0.5)
  updatedAt     DateTime @updatedAt
  eventSoundMap Json?    @default("{}")
  soundEnabled  Boolean  @default(true)
}
