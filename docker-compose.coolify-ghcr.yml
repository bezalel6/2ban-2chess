# Coolify deployment using GHCR images
# Redis is managed externally by Coolify - set REDIS_URL in environment
version: '3.8'

services:
  # Next.js Application from GHCR
  app:
    image: ghcr.io/bezalel6/2ban-2chess-app:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=3000
      # Production environment variables
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL:-wss://ws-chess.rndev.site}
      - NEXT_PUBLIC_WS_HEALTH_URL=${NEXT_PUBLIC_WS_HEALTH_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      # Admin setup
      - ADMIN_EMAILS=${ADMIN_EMAILS}
    restart: unless-stopped
    depends_on:
      - websocket
    networks:
      - coolify
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - coolify.managed=true
      - coolify.port=3000
      - coolify.domain=${SERVICE_FQDN_APP:-chess.rndev.site}

  # WebSocket Server from GHCR
  websocket:
    image: ghcr.io/bezalel6/2ban-2chess-websocket:latest
    ports:
      - "3001:3001"
      - "3002:3002"  # Health check port
    environment:
      - NODE_ENV=production
      - WS_PORT=3001
      - HEALTH_PORT=3002
      # Use internal Redis from this compose file
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://chess.rndev.site}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL:-wss://ws-chess.rndev.site}
      # Admin setup
      - ADMIN_EMAILS=${ADMIN_EMAILS}
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - coolify
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - coolify.managed=true
      - coolify.port=3001
      - coolify.domain=${SERVICE_FQDN_WEBSOCKET:-ws-chess.rndev.site}

  # Redis (included in the project)
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - coolify
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  coolify:
    external: true

volumes:
  redis-data: