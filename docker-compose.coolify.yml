# Coolify-optimized Docker Compose
version: '3.8'

services:
  # Next.js Application
  app:
    image: ghcr.io/${GITHUB_REPOSITORY:-bezalel6/2ban-2chess}:${GITHUB_SHA:-latest}
    # No build section - using pre-built image from GitHub
    ports:
      - "3000:3000"  # Expose to host for Cloudflare tunnel
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_WEBSOCKET_URL=wss://chess-api.rndev.site
      - NEXT_PUBLIC_API_URL=https://chess.rndev.site
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=https://chess.rndev.site
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    depends_on:
      - websocket
    networks:
      - coolify
    labels:
      # Coolify will auto-detect and configure these
      - coolify.managed=true
      - coolify.port=3000
      - coolify.domain=chess.rndev.site

  # WebSocket Server
  websocket:
    image: ghcr.io/${GITHUB_REPOSITORY:-bezalel6/2ban-2chess}-websocket:${GITHUB_SHA:-latest}
    # No build section - using pre-built image from GitHub
    ports:
      - "3001:3001"  # Expose to host for Cloudflare tunnel
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-StrongRedisPass123}@redis:6379
      - ALLOWED_ORIGINS=https://chess.rndev.site
      - NEXTAUTH_URL=https://chess.rndev.site
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    depends_on:
      - redis
    networks:
      - coolify
    labels:
      - coolify.managed=true
      - coolify.port=3001
      - coolify.domain=chess-api.rndev.site

  # Redis for WebSocket state (with authentication)
  redis:
    image: redis:7-alpine
    # Set a password - use ${REDIS_PASSWORD} from environment
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-StrongRedisPass123}
    networks:
      - coolify
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-StrongRedisPass123}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  coolify:
    external: true

volumes:
  redis-data: