# WebSocket Server Dockerfile - Optimized for Caching

# ===== Dependencies Stage =====
# Install all dependencies, including devDependencies, to build the server.
FROM node:20-alpine AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci --legacy-peer-deps

# ===== Builder Stage =====
# Build the server using the dependencies from the previous stage.
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npm run build:ws

# ===== Production Stage =====
# Create a small production image with only the built server and production dependencies.
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create a non-root user for security.
RUN addgroup -g 1001 -S nodejs && \
    adduser -S wsuser -u 1001

# Install only production dependencies.
COPY package*.json ./
RUN npm ci --only=production --legacy-peer-deps

# Copy the built server from the builder stage.
COPY --from=builder --chown=wsuser:nodejs /app/server/dist ./server/dist

USER wsuser

EXPOSE 3001

# Health check for WebSocket server
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3002/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})" || exit 1

# Run the built WebSocket server
CMD ["node", "server/dist/ws-server.js"]
